import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'com.android.library'
    id 'com.vanniktech.maven.publish' version '0.21.0'
}

android {
    compileSdkVersion 32
    buildToolsVersion "32.0.0"
    
    ndkPath = System.getenv('NDK_PATH')
    // ndkVersion = '24.0.8215888'
    
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 32
        versionCode Integer.valueOf(project.findProperty("VERSION_CODE"))
        versionName project.findProperty("VERSION_NAME")
        
        externalNativeBuild {
            cmake {
                arguments "-Dprotobuf_BUILD_SHARED_LIBS_DEFAULT=OFF", "-Dprotobuf_BUILD_TESTS=OFF"
            }
        }
    }
    
    buildFeatures {
        androidResources false
        prefabPublishing true
        buildConfig false
    }
    
    sourceSets {
        main {
            jni.srcDirs = ['native']
        }
    }

    externalNativeBuild {
        cmake {
            path "native/CMakeLists.txt"
            version "3.24.2"
        }
    }
    
    prefab {
        libprotobuf {
            headers "native/src"
        }
    }
}

// NDK does not run strip on static libraries, do it ourselves
def allAbi = [
        'armeabi-v7a': 'llvm-strip',
        'arm64-v8a'  : 'llvm-strip',
        'x86'        : 'llvm-strip',
        'x86_64'     : 'llvm-strip']

def stripNativeRelease = task('stripNativeRelease').doLast {
    def isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()

    for (String abi : allAbi.keySet()) {
        def path = Paths.get(project.buildDir.path, '..', '.cxx', 'RelWithDebInfo')
        path = Files.walk(path).filter { it != path }.findFirst().get()
        path = Paths.get(path.toString(), abi)
        
        def lib = path.resolve('libprotobuf.a')
        
        def toolchain = Paths.get(android.ndkDirectory.toString(), 'toolchains', 'llvm', 'prebuilt')
        toolchain = Files.walk(toolchain).filter { it != toolchain }.findFirst().get()

        def strip = "${allAbi.get(abi)}${isWindows ? ".exe" : ""}"
        def stripPath = toolchain.resolve(Paths.get('bin', strip))

        exec {
            commandLine stripPath, '--strip-unneeded', '--remove-section=.comment', lib
            workingDir path
            ignoreExitValue false
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'externalNativeBuildRelease') {
        task.finalizedBy stripNativeRelease
    }
}
